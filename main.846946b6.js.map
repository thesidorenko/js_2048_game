{"version":3,"sources":["scripts/main.js"],"names":["score","document","querySelector","buttonStart","gameBoard","messageWin","messageLose","messageStart","BOARD_SIZE","CELL_COUNT","scoreValue","addEventListener","classList","contains","remove","add","textContent","board","cells","forEach","cell","isEmpty","linkedTile","removeElement","unlinkTile","findEmptyCell","linkTile","Tile","Board","boardElement","i","push","Cell","Math","floor","cellsGroupedByColumn","reduce","groupCells","x","y","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","cellsGroupedByReversedRow","row","emptyCells","filter","random","length","createElement","append","tile","setCoords","linkedTileForMerge","newTile","hasTileForMerge","value","setValue","style","setProperty","bgLightness","log2","setupInput","window","handleInput","once","e","key","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","moveTiles","groupedCells","group","j","cellWithTile","targetCell","canAccept","linkTileForMerge","mergeTiles","canMove","some","canMoveInGroup"],"mappings":";AAAA,aAgUC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9TD,IAAMA,EAAQC,SAASC,cAAc,eAC/BC,EAAcF,SAASC,cAAc,UACrCE,EAAYH,SAASC,cAAc,eACnCG,EAAaJ,SAASC,cAAc,gBACpCI,EAAcL,SAASC,cAAc,iBACrCK,EAAeN,SAASC,cAAc,kBACtCM,EAAa,EACbC,EAAaD,EAAaA,EAC5BE,EAAa,EAEjBP,EAAYQ,iBAAiB,QAAS,WAChCR,EAAYS,UAAUC,SAAS,WACjCV,EAAYS,UAAUE,OAAO,SAC7BX,EAAYS,UAAUG,IAAI,WAC1BZ,EAAYa,YAAc,UAC1BT,EAAaK,UAAUG,IAAI,UAC3BV,EAAWO,UAAUG,IAAI,UACzBT,EAAYM,UAAUG,IAAI,WAG5BE,EAAMC,MAAMC,QAAQ,SAAAC,GACbA,EAAKC,YACRD,EAAKE,WAAWC,gBAChBH,EAAKI,cAGPxB,EAAMgB,YAAc,IAGtBC,EAAMQ,gBAAgBC,SAAS,IAAIC,EAAKvB,IACxCa,EAAMQ,gBAAgBC,SAAS,IAAIC,EAAKvB,MAGpCwB,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,GAAc,EAAA,KAAA,GACnBX,KAAAA,MAAQ,GAER,IAAA,IAAIY,EAAI,EAAGA,EAAIrB,EAAYqB,IACzBZ,KAAAA,MAAMa,KACT,IAAIC,EACFH,EACAC,EAAItB,EACJyB,KAAKC,MAAMJ,EAAItB,KAKhB2B,KAAAA,qBAAuB,KAAKjB,MAAMkB,OAAO,SAACC,EAAYjB,GAIlDiB,OAHPA,EAAWjB,EAAKkB,GAAKD,EAAWjB,EAAKkB,IAAM,GAC3CD,EAAWjB,EAAKkB,GAAGlB,EAAKmB,GAAKnB,EAEtBiB,GACN,IAEEG,KAAAA,6BAA+B,KAAKL,qBAAqBM,IAC5D,SAAAC,GAAU,OAAA,EAAIA,GAAQC,YAGnBC,KAAAA,kBAAoB,KAAK1B,MAAMkB,OAAO,SAACC,EAAYjB,GAI/CiB,OAHPA,EAAWjB,EAAKmB,GAAKF,EAAWjB,EAAKmB,IAAM,GAC3CF,EAAWjB,EAAKmB,GAAGnB,EAAKkB,GAAKlB,EAEtBiB,GACN,IAEEQ,KAAAA,0BAA4B,KAAKD,kBAAkBH,IACtD,SAAAK,GAAO,OAAA,EAAIA,GAAKH,YA4PrB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,gBAxPiB,MAAA,WACRI,IAAAA,EAAa,KAAK7B,MAAM8B,OAAO,SAAA5B,GAAQA,OAAAA,EAAKC,YAG3C0B,OAAAA,EAFad,KAAKC,MAAMD,KAAKgB,SAAWF,EAAWG,aAsP7D,EA7RKtB,GA6CAI,EAAAA,WACQH,SAAAA,EAAAA,EAAcS,EAAGC,GAAG,EAAA,KAAA,GACzBD,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EAEHnB,IAAAA,EAAOnB,SAASkD,cAAc,OAEpC/B,EAAKR,UAAUG,IAAI,QACnBc,EAAauB,OAAOhC,GAwOvB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WArOUiC,MAAAA,SAAAA,GACPA,EAAKC,UAAU,KAAKhB,EAAG,KAAKC,GACvBjB,KAAAA,WAAa+B,IAmOrB,CAAA,IAAA,aAhOc,MAAA,WACN/B,KAAAA,WAAa,OA+NrB,CAAA,IAAA,UA5NW,MAAA,WACD,OAAC,KAAKA,aA2NhB,CAAA,IAAA,mBAxNkB+B,MAAAA,SAAAA,GACfA,EAAKC,UAAU,KAAKhB,EAAG,KAAKC,GACvBgB,KAAAA,mBAAqBF,IAsN7B,CAAA,IAAA,kBAnNmB,MAAA,WACT,QAAE,KAAKE,qBAkNjB,CAAA,IAAA,YA/MWC,MAAAA,SAAAA,GACD,OAAA,KAAKnC,YACL,KAAKoC,mBAAqB,KAAKnC,WAAWoC,QAAUF,EAAQE,QA6MtE,CAAA,IAAA,aA1Mc,MAAA,WACNpC,KAAAA,WAAWqC,SAAS,KAAKrC,WAAWoC,MACrC,KAAKH,mBAAmBG,OAE5BhD,GAAc,KAAKY,WAAWoC,MAC9B1D,EAAMgB,YAAcN,EAEf6C,KAAAA,mBAAmBhC,gBACnBgC,KAAAA,mBAAqB,SAkM7B,EAhPKvB,GAkDAL,EAAAA,WACQE,SAAAA,EAAAA,GAAc,EAAA,KAAA,GACnBwB,KAAAA,KAAOpD,SAASkD,cAAc,OAC9BE,KAAAA,KAAKzC,UAAUG,IAAI,QAEnB4C,KAAAA,SAAS1B,KAAKgB,SAAW,GAAM,EAAI,GAExCpB,EAAauB,OAAO,KAAKC,MAuL5B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YApLWf,MAAAA,SAAAA,EAAGC,GACND,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EAEJc,KAAAA,KAAKO,MAAMC,YAAY,MAAOvB,GAC9Be,KAAAA,KAAKO,MAAMC,YAAY,MAAOtB,KA+KtC,CAAA,IAAA,WA5KUmB,MAAAA,SAAAA,GACFA,KAAAA,MAAQA,EACRL,KAAAA,KAAKrC,YAAc,KAAK0C,MAEvBI,IAAAA,EAAc,IAAyB,EAAnB7B,KAAK8B,KAAKL,GAE/BL,KAAAA,KAAKO,MAAMC,YAAY,iBAAqBC,GAAAA,OAAAA,EAAjD,MAEKT,KAAAA,KAAKO,MAAMC,YAAY,mBACvBC,GAAAA,OAAAA,EAAc,GAAK,GAAK,GAD7B,MAGmB,OAAf,KAAKJ,OACPrD,EAAWO,UAAUE,OAAO,YAgKjC,CAAA,IAAA,gBA5JiB,MAAA,WACTuC,KAAAA,KAAKvC,aA2Jb,EA9LKa,GAuCAV,EAAQ,IAAIW,EAAMxB,GAIxB,SAAS4D,IACPC,OAAOtD,iBAAiB,UAAWuD,EAAa,CAAEC,MAAM,IAG1D,SAASD,EAAYE,GACXA,OAAAA,EAAEC,KACH,IAAA,UACC,IAACC,IAGH,YAFAN,IAKFO,IACA,MAGG,IAAA,YACC,IAACC,IAGH,YAFAR,IAKFS,IACA,MAGG,IAAA,YACC,IAACC,IAGH,YAFAV,IAKFW,IACA,MAGG,IAAA,aACC,IAACC,IAGH,YAFAZ,IAKFa,IACA,MAGF,QAGE,YAFAb,IAKJ/C,EAAMQ,gBAAgBC,SAAS,IAAIC,EAAKvB,IAEnCkE,KAAgBE,KAAkBE,KAAkBE,KACvDtE,EAAYM,UAAUE,OAAO,UAG/BkD,IAGF,SAASO,IACPO,EAAU7D,EAAMkB,sBAGlB,SAASsC,IACPK,EAAU7D,EAAMuB,8BAGlB,SAASmC,IACPG,EAAU7D,EAAM2B,mBAGlB,SAASiC,IACPC,EAAU7D,EAAM4B,2BAGlB,SAASiC,EAAUC,GACjBA,EAAa5D,QAAQ,SAAA6D,GACd,IAAA,IAAIlD,EAAI,EAAGA,EAAIkD,EAAM9B,OAAQpB,IAC5BkD,IAAAA,EAAMlD,GAAGT,UAAT2D,CASGC,IALDC,IAAAA,EAAeF,EAAMlD,GAEvBqD,OAAJ,EACIF,EAAInD,EAAI,EAELmD,GAAK,GAAKD,EAAMC,GAAGG,UAAUF,EAAa5D,aAC/C6D,EAAaH,EAAMC,GACnBA,IAGGE,IAIDA,EAAW9D,UACb8D,EAAWzD,SAASwD,EAAa5D,YAEjC6D,EAAWE,iBAAiBH,EAAa5D,YAG3C4D,EAAa1D,iBAIjBP,EAAMC,MAAMC,QAAQ,SAAAC,GAClBA,EAAKqC,mBAAqBrC,EAAKkE,eAInC,SAAShB,IACAiB,OAAAA,EAAQtE,EAAMkB,sBAGvB,SAASqC,IACAe,OAAAA,EAAQtE,EAAMuB,8BAGvB,SAASkC,IACAa,OAAAA,EAAQtE,EAAM2B,mBAGvB,SAASgC,IACAW,OAAAA,EAAQtE,EAAM4B,2BAGvB,SAAS0C,EAAQR,GACRA,OAAAA,EAAaS,KAAK,SAAAR,GAASS,OAAAA,EAAeT,KAGnD,SAASS,EAAeT,GACfA,OAAAA,EAAMQ,KAAK,SAACpE,EAAMU,GACnBA,OAAM,IAANA,IAAWV,EAAKC,WAID2D,EAAMlD,EAAI,GAEXsD,UAAUhE,EAAKE,cAnJrC0C","file":"main.846946b6.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game_score');\nconst buttonStart = document.querySelector('.start');\nconst gameBoard = document.querySelector('.game_board');\nconst messageWin = document.querySelector('.message_win');\nconst messageLose = document.querySelector('.message_lose');\nconst messageStart = document.querySelector('.message_start');\nconst BOARD_SIZE = 4;\nconst CELL_COUNT = BOARD_SIZE * BOARD_SIZE;\nlet scoreValue = 0;\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.classList.contains('start')) {\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    buttonStart.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n\n  board.cells.forEach(cell => {\n    if (!cell.isEmpty()) {\n      cell.linkedTile.removeElement();\n      cell.unlinkTile();\n    }\n\n    score.textContent = 0;\n  });\n\n  board.findEmptyCell().linkTile(new Tile(gameBoard));\n  board.findEmptyCell().linkTile(new Tile(gameBoard));\n});\n\nclass Board {\n  constructor(boardElement) {\n    this.cells = [];\n\n    for (let i = 0; i < CELL_COUNT; i++) {\n      this.cells.push(\n        new Cell(\n          boardElement,\n          i % BOARD_SIZE,\n          Math.floor(i / BOARD_SIZE)\n        )\n      );\n    }\n\n    this.cellsGroupedByColumn = this.cells.reduce((groupCells, cell) => {\n      groupCells[cell.x] = groupCells[cell.x] || [];\n      groupCells[cell.x][cell.y] = cell;\n\n      return groupCells;\n    }, []);\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(\n      column => [...column].reverse()\n    );\n\n    this.cellsGroupedByRow = this.cells.reduce((groupCells, cell) => {\n      groupCells[cell.y] = groupCells[cell.y] || [];\n      groupCells[cell.y][cell.x] = cell;\n\n      return groupCells;\n    }, []);\n\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(\n      row => [...row].reverse()\n    );\n  }\n\n  findEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n}\n\nclass Cell {\n  constructor(boardElement, x, y) {\n    this.x = x;\n    this.y = y;\n\n    const cell = document.createElement('div');\n\n    cell.classList.add('cell');\n    boardElement.append(cell);\n  }\n\n  linkTile(tile) {\n    tile.setCoords(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setCoords(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return this.isEmpty()\n      || (!this.hasTileForMerge() && this.linkedTile.value === newTile.value);\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(this.linkedTile.value\n      + this.linkedTileForMerge.value);\n\n    scoreValue += this.linkedTile.value;\n    score.textContent = scoreValue;\n\n    this.linkedTileForMerge.removeElement();\n    this.linkedTileForMerge = null;\n  }\n}\n\nclass Tile {\n  constructor(boardElement) {\n    this.tile = document.createElement('div');\n    this.tile.classList.add('tile');\n\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\n\n    boardElement.append(this.tile);\n  }\n\n  setCoords(x, y) {\n    this.x = x;\n    this.y = y;\n\n    this.tile.style.setProperty('--x', x);\n    this.tile.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tile.textContent = this.value;\n\n    const bgLightness = 100 - Math.log2(value) * 8;\n\n    this.tile.style.setProperty('--bg-lightness', `${bgLightness}%`);\n\n    this.tile.style.setProperty('--text-lightness',\n      `${bgLightness < 40 ? 80 : 20}%`);\n\n    if (this.value === 2048) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n\n  removeElement() {\n    this.tile.remove();\n  }\n}\n\nconst board = new Board(gameBoard);\n\nsetupInput();\n\nfunction setupInput() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\nfunction handleInput(e) {\n  switch (e.key) {\n    case 'ArrowUp': {\n      if (!canMoveUp()) {\n        setupInput();\n\n        return;\n      }\n\n      moveUp();\n      break;\n    }\n\n    case 'ArrowDown': {\n      if (!canMoveDown()) {\n        setupInput();\n\n        return;\n      }\n\n      moveDown();\n      break;\n    }\n\n    case 'ArrowLeft': {\n      if (!canMoveLeft()) {\n        setupInput();\n\n        return;\n      }\n\n      moveLeft();\n      break;\n    }\n\n    case 'ArrowRight': {\n      if (!canMoveRight()) {\n        setupInput();\n\n        return;\n      }\n\n      moveRight();\n      break;\n    }\n\n    default:\n      setupInput();\n\n      return;\n  }\n\n  board.findEmptyCell().linkTile(new Tile(gameBoard));\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    messageLose.classList.remove('hidden');\n  }\n\n  setupInput();\n}\n\nfunction moveUp() {\n  moveTiles(board.cellsGroupedByColumn);\n}\n\nfunction moveDown() {\n  moveTiles(board.cellsGroupedByReversedColumn);\n}\n\nfunction moveLeft() {\n  moveTiles(board.cellsGroupedByRow);\n}\n\nfunction moveRight() {\n  moveTiles(board.cellsGroupedByReversedRow);\n}\n\nfunction moveTiles(groupedCells) {\n  groupedCells.forEach(group => {\n    for (let i = 1; i < group.length; i++) {\n      if (group[i].isEmpty()) {\n        continue;\n      }\n\n      const cellWithTile = group[i];\n\n      let targetCell;\n      let j = i - 1;\n\n      while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n        targetCell = group[j];\n        j--;\n      }\n\n      if (!targetCell) {\n        continue;\n      }\n\n      if (targetCell.isEmpty()) {\n        targetCell.linkTile(cellWithTile.linkedTile);\n      } else {\n        targetCell.linkTileForMerge(cellWithTile.linkedTile);\n      }\n\n      cellWithTile.unlinkTile();\n    }\n  });\n\n  board.cells.forEach(cell => {\n    cell.hasTileForMerge() && cell.mergeTiles();\n  });\n}\n\nfunction canMoveUp() {\n  return canMove(board.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(board.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(board.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(board.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some(group => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, i) => {\n    if (i === 0 || cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[i - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n"]}